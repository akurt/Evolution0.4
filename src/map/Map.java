package map;

import resources.Resources;

/*
 * Hier sind die Weltkarten enthalten, jede Epoche hat ihre eigene Karte
 * Der Array positionMap enthält zusätzlich eine FoodMap zur Positionierung
 * der Ressourcen
 */
public class Map {

	private Meer meer;			// 0
	private Savanne savanne;	// 3
	private Sumpf sumpf;		// 2
	private Wiese wiese;		// 4
	
	private Gebirge gebirge;	// 6
	private Strand strand;		// 1
	private Wald wald;			// 5
	
	private int x, y, nr;
	private Habitat habitat;
	
	private Resources ress;
	
	private int epoche = 1;
	
	public Map() {
		
	}
	
	public Map(Meer meer, Savanne savanne, Sumpf sumpf, Wiese wiese, Gebirge gebirge, Strand strand, Wald wald) {
		this.meer = meer;
		this.savanne = savanne;
		this.sumpf = sumpf;
		this.wiese = wiese;
		this.gebirge = gebirge;
		this.strand = strand;
		this.wald = wald;
	}

	/*
	 * Array definiert Weltkarte
	 */
	private int[][][] positionMap = {	
		{	// FoodMap
			{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
			{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
			{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
			{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
			{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
			{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
			{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
			{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
			{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
			{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
			{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
			{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
			{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
			{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
			{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
			{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
			{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
			{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
			{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
			{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}
		},
		{	// epoche 1
			{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
			{0, 0, 2, 1, 1, 0, 0, 0, 0, 1, 2, 2, 2, 0, 0, 1, 2, 2, 0, 0, 0, 2, 1, 1, 1, 0, 0, 1, 0, 0},
			{0, 2, 2, 4, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 0, 1, 2, 2, 0, 0, 2, 2, 5, 5, 1, 1, 1, 1, 1, 0},
			{0, 2, 4, 4, 4, 2, 2, 2, 2, 2, 2, 2, 4, 2, 0, 0, 1, 2, 0, 2, 2, 4, 4, 5, 5, 5, 5, 5, 1, 0},
			{0, 2, 2, 4, 4, 5, 5, 5, 2, 2, 4, 4, 4, 2, 0, 0, 1, 0, 0, 2, 4, 4, 4, 4, 5, 5, 5, 5, 1, 0},
			{0, 0, 2, 4, 4, 4, 5, 5, 3, 4, 4, 4, 4, 1, 0, 0, 0, 0, 0, 2, 4, 4, 4, 4, 4, 5, 5, 1, 1, 0},
			{0, 0, 2, 4, 4, 4, 3, 3, 3, 3, 4, 4, 4, 1, 0, 0, 0, 2, 2, 2, 4, 4, 4, 4, 4, 5, 5, 1, 0, 0},
			{0, 2, 2, 4, 4, 4, 4, 3, 3, 3, 3, 4, 4, 1, 1, 0, 2, 2, 5, 5, 5, 4, 4, 4, 4, 2, 2, 1, 0, 0},
			{0, 2, 2, 4, 4, 4, 4, 3, 3, 3, 3, 4, 4, 4, 1, 0, 2, 5, 5, 5, 3, 6, 6, 4, 4, 2, 1, 1, 0, 0},
			{0, 0, 2, 4, 4, 4, 4, 4, 3, 3, 3, 3, 4, 4, 1, 0, 2, 2, 5, 3, 3, 5, 5, 5, 2, 2, 1, 0, 0, 0},
			{0, 0, 1, 4, 4, 4, 4, 4, 3, 3, 3, 3, 3, 3, 1, 0, 0, 2, 3, 3, 3, 2, 2, 2, 2, 2, 1, 0, 0, 0},
			{0, 0, 1, 4, 4, 4, 4, 4, 3, 3, 3, 3, 3, 1, 0, 0, 2, 2, 3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 0, 0},
			{0, 0, 1, 4, 4, 4, 3, 3, 3, 3, 3, 3, 3, 1, 6, 0, 1, 4, 3, 3, 2, 2, 1, 0, 0, 1, 6, 1, 1, 0},
			{0, 0, 1, 1, 4, 3, 3, 3, 5, 5, 3, 3, 1, 1, 0, 0, 1, 4, 3, 3, 3, 2, 1, 0, 0, 1, 6, 6, 1, 0},
			{0, 0, 0, 1, 1, 1, 3, 5, 5, 5, 5, 3, 1, 0, 0, 0, 1, 4, 4, 3, 3, 3, 1, 1, 0, 0, 0, 6, 1, 0},
			{0, 0, 0, 0, 0, 1, 6, 6, 5, 6, 5, 5, 1, 0, 0, 1, 4, 4, 3, 3, 3, 3, 5, 1, 6, 6, 0, 1, 1, 0},
			{0, 0, 1, 1, 0, 0, 0, 6, 6, 6, 6, 1, 1, 0, 0, 5, 5, 5, 3, 3, 3, 5, 5, 5, 5, 6, 0, 0, 0, 0},
			{0, 6, 6, 1, 0, 0, 0, 0, 6, 6, 1, 1, 0, 0, 1, 6, 1, 1, 3, 3, 3, 3, 3, 3, 3, 6, 6, 1, 0, 0},
			{0, 1, 6, 1, 0, 0, 0, 0, 6, 1, 1, 0, 0, 0, 6, 6, 0, 0, 0, 0, 0, 0, 3, 3, 0, 1, 1, 1, 0, 0},
			{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}
		},
		{	// epoche 2
			{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
			{0, 0, 2, 2, 2, 0, 0, 0, 0, 1, 2, 2, 2, 0, 0, 1, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0},
			{0, 2, 2, 5, 5, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 0, 0, 2, 2, 0, 0, 0, 1, 1, 1, 1, 0},
			{0, 2, 4, 5, 5, 2, 2, 2, 2, 2, 2, 2, 4, 2, 2, 2, 2, 2, 0, 2, 2, 4, 4, 5, 5, 5, 5, 5, 1, 0},
			{0, 2, 2, 5, 5, 5, 5, 5, 2, 2, 4, 4, 4, 2, 0, 0, 1, 0, 0, 2, 4, 4, 4, 4, 5, 5, 5, 5, 1, 0},
			{0, 0, 2, 4, 5, 4, 5, 5, 3, 4, 4, 4, 4, 1, 0, 0, 0, 0, 0, 2, 4, 4, 4, 4, 4, 5, 5, 1, 1, 0},
			{0, 0, 2, 4, 4, 4, 3, 3, 3, 3, 4, 4, 4, 1, 0, 0, 0, 2, 2, 2, 4, 4, 4, 4, 4, 5, 5, 1, 0, 0},
			{0, 2, 2, 4, 4, 4, 4, 3, 4, 3, 4, 4, 4, 1, 1, 0, 2, 2, 5, 5, 5, 4, 4, 4, 4, 2, 2, 1, 0, 0},
			{0, 2, 2, 4, 4, 4, 4, 3, 4, 4, 4, 4, 4, 4, 1, 0, 2, 5, 5, 5, 3, 6, 6, 4, 4, 2, 1, 1, 0, 0},
			{0, 0, 2, 4, 4, 4, 4, 4, 4, 4, 4, 3, 4, 4, 1, 0, 2, 2, 5, 3, 3, 5, 5, 5, 2, 2, 1, 0, 0, 0},
			{0, 0, 1, 4, 4, 4, 4, 4, 4, 4, 3, 3, 3, 3, 1, 0, 0, 2, 3, 3, 3, 2, 2, 2, 2, 2, 1, 0, 0, 0},
			{0, 0, 1, 4, 4, 4, 4, 4, 4, 4, 3, 3, 3, 1, 0, 0, 2, 2, 3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 0, 0},
			{0, 0, 1, 4, 4, 4, 3, 3, 3, 3, 3, 3, 3, 1, 6, 0, 1, 4, 3, 3, 2, 2, 1, 0, 0, 1, 6, 1, 1, 0},
			{0, 0, 0, 0, 4, 3, 3, 3, 5, 5, 3, 3, 1, 1, 0, 0, 1, 4, 3, 3, 3, 2, 1, 0, 0, 1, 6, 6, 1, 0},
			{0, 0, 0, 0, 0, 1, 3, 5, 5, 5, 5, 3, 1, 0, 0, 0, 1, 3, 3, 3, 3, 5, 1, 1, 0, 0, 1, 6, 1, 0},
			{0, 0, 0, 0, 0, 0, 0, 6, 5, 6, 5, 5, 1, 0, 0, 1, 4, 3, 3, 3, 5, 5, 5, 1, 6, 6, 1, 1, 1, 0},
			{0, 0, 0, 0, 0, 0, 0, 0, 6, 6, 6, 1, 1, 0, 0, 5, 5, 5, 3, 5, 5, 5, 5, 5, 5, 6, 0, 0, 0, 0},
			{0, 6, 6, 0, 0, 0, 0, 0, 6, 6, 1, 1, 0, 0, 1, 6, 1, 1, 3, 3, 5, 3, 5, 3, 3, 6, 6, 1, 0, 0},
			{0, 1, 6, 1, 0, 0, 0, 0, 6, 1, 1, 0, 0, 0, 6, 6, 0, 0, 0, 0, 0, 0, 3, 3, 0, 1, 1, 1, 0, 0},
			{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}
		},
		{	// epoche 3
			{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
			{0, 0, 2, 2, 2, 0, 0, 0, 0, 1, 2, 2, 2, 0, 0, 1, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0},
			{0, 2, 2, 5, 5, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 0, 0, 2, 2, 0, 0, 0, 1, 1, 1, 1, 0},
			{0, 2, 4, 5, 5, 2, 2, 2, 2, 2, 2, 2, 4, 4, 2, 2, 2, 2, 0, 2, 2, 4, 4, 5, 5, 5, 5, 5, 1, 0},
			{0, 2, 2, 5, 5, 5, 5, 5, 2, 2, 4, 4, 4, 4, 2, 0, 1, 0, 0, 2, 4, 4, 4, 4, 5, 5, 5, 5, 1, 0},
			{0, 0, 2, 4, 5, 4, 5, 5, 3, 4, 4, 4, 4, 1, 2, 0, 0, 0, 0, 2, 4, 4, 3, 4, 4, 5, 5, 1, 1, 0},
			{0, 0, 2, 4, 4, 4, 3, 3, 3, 3, 4, 4, 4, 1, 0, 0, 0, 2, 2, 2, 4, 3, 3, 4, 4, 5, 5, 1, 0, 0},
			{0, 2, 2, 4, 4, 4, 4, 3, 4, 3, 4, 4, 4, 1, 1, 0, 2, 2, 5, 5, 3, 3, 4, 4, 4, 2, 2, 1, 0, 0},
			{0, 2, 2, 4, 4, 4, 4, 3, 4, 4, 4, 4, 4, 4, 1, 0, 2, 5, 5, 5, 3, 6, 6, 4, 4, 2, 1, 1, 0, 0},
			{0, 0, 2, 4, 4, 4, 4, 4, 4, 4, 4, 3, 4, 4, 1, 0, 2, 2, 5, 3, 3, 5, 5, 5, 2, 2, 1, 0, 0, 0},
			{0, 0, 1, 4, 4, 4, 4, 4, 4, 4, 3, 3, 3, 3, 1, 0, 0, 2, 3, 3, 3, 2, 2, 2, 2, 2, 0, 0, 0, 0},
			{0, 0, 1, 4, 4, 4, 4, 4, 4, 4, 3, 3, 3, 1, 0, 0, 2, 2, 3, 3, 3, 2, 1, 1, 0, 0, 0, 1, 0, 0},
			{0, 0, 1, 4, 4, 4, 4, 4, 4, 6, 3, 3, 3, 1, 6, 0, 1, 4, 3, 3, 2, 2, 1, 0, 0, 0, 6, 1, 1, 0},
			{0, 0, 1, 2, 4, 3, 4, 4, 5, 6, 6, 3, 1, 1, 0, 0, 1, 4, 3, 3, 3, 2, 1, 0, 0, 1, 6, 6, 1, 0},
			{0, 0, 0, 1, 1, 1, 3, 5, 6, 6, 5, 3, 1, 0, 0, 0, 1, 3, 3, 3, 3, 5, 1, 1, 0, 0, 1, 6, 1, 0},
			{0, 0, 0, 0, 1, 0, 0, 6, 5, 6, 5, 5, 1, 0, 0, 1, 4, 3, 3, 3, 5, 5, 5, 1, 6, 6, 1, 1, 1, 0},
			{0, 0, 0, 0, 0, 0, 0, 0, 6, 6, 6, 1, 1, 0, 0, 5, 5, 5, 3, 5, 5, 5, 5, 5, 5, 6, 0, 0, 0, 0},
			{0, 6, 6, 0, 0, 0, 0, 0, 6, 6, 1, 1, 0, 0, 1, 6, 1, 1, 3, 3, 5, 3, 5, 3, 3, 6, 6, 1, 0, 0},
			{0, 1, 6, 1, 0, 0, 0, 0, 6, 1, 1, 0, 0, 0, 6, 6, 0, 0, 0, 0, 0, 0, 3, 3, 0, 1, 1, 1, 0, 0},
			{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}
		},
		{	// epoche 4
			{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
			{0, 0, 2, 2, 2, 0, 0, 0, 0, 1, 2, 2, 2, 0, 0, 1, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0},
			{0, 2, 2, 5, 5, 1, 1, 1, 0, 1, 2, 2, 2, 2, 2, 2, 2, 2, 0, 0, 2, 2, 0, 0, 0, 1, 1, 1, 1, 0},
			{0, 2, 4, 5, 5, 2, 2, 2, 0, 0, 2, 2, 4, 4, 2, 2, 2, 2, 0, 2, 2, 4, 4, 5, 5, 5, 5, 5, 1, 0},
			{0, 2, 2, 5, 5, 5, 5, 5, 2, 0, 4, 4, 4, 4, 2, 0, 1, 0, 0, 2, 4, 4, 4, 4, 5, 5, 5, 5, 1, 0},
			{0, 0, 2, 4, 5, 4, 5, 5, 3, 0, 0, 4, 4, 1, 2, 0, 0, 0, 0, 2, 4, 4, 3, 4, 4, 5, 5, 1, 1, 0},
			{0, 0, 2, 4, 4, 4, 3, 3, 3, 3, 0, 4, 4, 1, 0, 0, 0, 2, 2, 2, 4, 3, 3, 4, 4, 5, 5, 1, 0, 0},
			{0, 2, 2, 4, 4, 4, 4, 3, 4, 3, 0, 0, 0, 1, 1, 0, 2, 2, 5, 5, 3, 3, 4, 4, 4, 2, 2, 1, 0, 0},
			{0, 2, 2, 4, 4, 4, 4, 3, 4, 4, 4, 0, 0, 0, 0, 0, 2, 5, 5, 5, 3, 6, 6, 4, 4, 2, 1, 1, 0, 0},
			{0, 0, 2, 4, 4, 4, 4, 4, 4, 4, 4, 3, 0, 0, 0, 0, 2, 2, 5, 3, 3, 5, 5, 5, 2, 2, 1, 0, 0, 0},
			{0, 0, 1, 4, 4, 4, 4, 4, 4, 4, 3, 3, 3, 3, 1, 0, 0, 2, 3, 3, 3, 2, 2, 2, 2, 2, 0, 0, 0, 0},
			{0, 0, 1, 4, 4, 4, 4, 4, 4, 4, 3, 3, 3, 1, 0, 0, 2, 2, 3, 3, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0},
			{0, 0, 2, 2, 4, 4, 4, 4, 4, 6, 3, 3, 3, 1, 6, 0, 1, 4, 3, 3, 2, 2, 1, 0, 0, 0, 0, 0, 0, 0},
			{0, 0, 0, 2, 4, 3, 4, 4, 5, 6, 6, 3, 1, 1, 0, 0, 1, 4, 3, 3, 3, 2, 1, 0, 0, 1, 6, 6, 1, 0},
			{0, 1, 0, 1, 1, 1, 3, 5, 6, 6, 5, 3, 1, 0, 0, 0, 1, 3, 3, 3, 3, 5, 1, 1, 0, 0, 1, 6, 1, 0},
			{0, 1, 0, 0, 1, 0, 0, 6, 5, 6, 5, 5, 1, 0, 0, 1, 4, 3, 3, 3, 5, 5, 5, 1, 6, 6, 1, 1, 1, 0},
			{0, 6, 1, 0, 0, 0, 0, 0, 6, 6, 6, 1, 1, 0, 0, 5, 5, 5, 3, 5, 5, 5, 5, 5, 5, 6, 0, 0, 0, 0},
			{0, 6, 6, 0, 0, 0, 0, 0, 6, 6, 1, 1, 0, 0, 1, 6, 1, 1, 3, 3, 5, 3, 5, 3, 3, 6, 6, 1, 0, 0},
			{0, 1, 6, 1, 0, 0, 0, 0, 6, 1, 1, 0, 0, 0, 6, 6, 0, 0, 0, 0, 0, 0, 3, 3, 0, 1, 1, 1, 0, 0},
			{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}
		}
	};
	
	/*
	 * Ordnet Ressourcen zu
	 */
	public Resources getFood(int px, int py){
		if(px / 20 <= 0){
			y = 0;
		}else{
			y = px /20;
		}
		if(py / 20 <= 0){
			x = 0;
		}else{
			x = py /20;
		}
		nr = positionMap[0][x][y];
		
		switch(nr){
		case 0:
			ress = Resources.LEER;
			break;
		case 1:
			ress = Resources.FISCH;
			break;
		case 2:
			ress = Resources.FLEISCH;
			break;
		case 3:
			ress = Resources.FRUECHTE;
			break;
		case 4:
			ress = Resources.GETREIDE;
			break;
		default:
			ress = Resources.LEER;
			break;
		}
		return ress;
	}
	
	/*
	 * gibt Typ des Habitats zurück
	 */
	public Habitat getHabitat(int px, int py) {
		if(px / 20 <= 0){
			y = 0;
		}else{
			y = px /20;
		}
		if(py / 20 <= 0){
			x = 0;
		}else{
			x = py /20;
		}
		nr = positionMap[epoche][x][y];
		
		switch (nr) {
		case 0:
			habitat = Habitat.MEER;
			break;
		case 1:
			habitat = Habitat.STRAND;
			break;
		case 2:
			habitat = Habitat.SUMPF;
			break;
		case 3:
			habitat = Habitat.SAVANNE;
			break;
		case 4:
			habitat = Habitat.WIESE;
			break;
		case 5:
			habitat = Habitat.WALD;
			break;
		case 6:
			habitat = Habitat.GEBIRGE;
			break;
		default:
			habitat = Habitat.MEER;
			break;
		}
		return habitat;
	}
	
	/*
	 * zeichnet Weltkarte
	 */
	public void zeichnen() {
		int y = 0;
		for(int[] i : positionMap[epoche]){
			int x = 0; 
			for(int a : i){	
				switch(a){
				case 0:
					meer.getBild().draw(x, y, 20, 20);
					break;
				case 1:
					strand.getBild().draw(x, y, 20, 20);
					break;
				case 2:
					sumpf.getBild().draw(x, y, 20, 20);
					break;
				case 3:
					savanne.getBild().draw(x, y, 20, 20);
					break;
				case 4:
					wiese.getBild().draw(x, y, 20, 20);
					break;
				case 5:
					wald.getBild().draw(x, y, 20, 20);
					break;
				case 6:
					gebirge.getBild().draw(x, y, 20, 20);
					break;
				}
				x += 20;
			}
			y += 20;
		}
	}
	
	/*
	 * gibt Map der entsprechenden Epoche zurück
	 */
	public int[][] getPositionMap() {
		return positionMap[epoche];
	}
	
	/*
	 * setzt Ressourcen auf FoodMap
	 */
	public void setFoodMap(int px, int py, int nr){
		if(px / 20 <= 0){
			y = 0;
		}else{
			y = px /20;
		}
		if(py / 20 <= 0){
			x = 0;
		}else{
			x = py /20;
		}
		positionMap[0][x][y] = nr;
	}
	
	/*
	 * gibt FoodMap zurück
	 */
	public int[][] getFoodMap(){
		return positionMap[0];
	}
	
	/*
	 * setzt FoodMap zurück
	 */
	public void setBackFood(){
		for(int[] d : positionMap[0]){
			for(int a : d){
				a = 0;
				positionMap[0][x][y] = a;
			}
		}
	}
	
	public int getEpoche() {
		return epoche;
	}
	
	public void setEpoche(int epoche) {
		this.epoche = epoche;
	}
}
